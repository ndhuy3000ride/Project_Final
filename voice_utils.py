import os
import librosa
import librosa.display
import matplotlib.pyplot as plt
import numpy as np
import IPython.display as ipd
from tensorflow.keras.preprocessing.image import load_img, img_to_array
from tensorflow import keras
import json
from collections import Counter

# model_path = 'models/voice_classification_cnn_v2.h5'
# label_path = 'models/class_labels_2.json'

IMAGE_SIZE = (128, 128)  # C·∫≠p nh·∫≠t ƒë·ªÉ kh·ªõp v·ªõi model

def plot_spectrogram(audio_path, segment_duration=3, save_dir=None, use_mel=True):
    """Chuy·ªÉn audio th√†nh c√°c ·∫£nh Mel Spectrogram v√† l∆∞u v√†o th∆∞ m·ª•c."""
    y, sr = librosa.load(audio_path, sr=None)
    segment_samples = segment_duration * sr

    if save_dir:
        os.makedirs(save_dir, exist_ok=True)

    for i, start in enumerate(range(0, len(y), segment_samples)):
        end = start + segment_samples
        y_segment = y[start:end]

        if len(y_segment) < segment_samples:
            break

        plt.figure(figsize=(10, 4))

        if use_mel:
            S = librosa.feature.melspectrogram(y=y_segment, sr=sr, n_mels=128, fmax=8000)
            S_db = librosa.power_to_db(S, ref=np.max)
            librosa.display.specshow(S_db, sr=sr, x_axis='time', y_axis='mel', fmax=8000, cmap='magma')
            plt.title(f'Mel Spectrogram - Segment {i+1}')
        else:
            S = np.abs(librosa.stft(y_segment))
            S_db = librosa.amplitude_to_db(S, ref=np.max)
            librosa.display.specshow(S_db, sr=sr, x_axis='time', y_axis='log', cmap='inferno')
            plt.title(f'Spectrogram - Segment {i+1}')

        plt.colorbar(format='%+2.0f dB')
        plt.xlabel('Time')
        plt.ylabel('Frequency')
        plt.tight_layout()

        if save_dir:
            save_path = os.path.join(save_dir, f'segment_{i+1}.png')
            plt.savefig(save_path)
            plt.close()
        else:
            plt.show()

    ipd.display(ipd.Audio(audio_path))

def predict_speaker_from_folder(folder_path, model_path, label_path):
    """D·ª± ƒëo√°n speaker t·ª´ folder ch·ª©a nhi·ªÅu ·∫£nh spectrogram v√† t√≠nh ƒë·ªô ch√≠nh x√°c trung b√¨nh."""

    # Load m√¥ h√¨nh
    model = keras.models.load_model(model_path)

    # Load nh√£n
    with open(label_path, 'r') as f:
        class_indices = json.load(f)
    index_to_class = {v: k for k, v in class_indices.items()}  # map index -> label

    # Danh s√°ch ·∫£nh trong folder
    image_files = [f for f in os.listdir(folder_path) if f.endswith(('.png', '.jpg', '.jpeg'))]

    if not image_files:
        print("‚ùå Kh√¥ng t√¨m th·∫•y ·∫£nh trong folder!")
        return None

    predictions = []
    confidences = []

    for image_file in image_files:
        image_path = os.path.join(folder_path, image_file)

        # Load v√† ti·ªÅn x·ª≠ l√Ω ·∫£nh
        img = load_img(image_path, target_size=IMAGE_SIZE)
        img_array = img_to_array(img) / 255.0  # Chu·∫©n h√≥a
        img_array = np.expand_dims(img_array, axis=0)  # Th√™m batch dimension

        # D·ª± ƒëo√°n
        preds = model.predict(img_array)
        predicted_class = np.argmax(preds)
        class_labels = index_to_class  # d√πng mapping t·ª´ file json ƒë√£ load
        # class_labels = list(train_generator.class_indices.keys())  # L·∫•y nh√£n class

        # predictions.append(class_labels[predicted_class])
        predictions.append(index_to_class[predicted_class])
        confidences.append(preds[0][predicted_class])  # L∆∞u ƒë·ªô t·ª± tin

    # L·∫•y speaker ƒë∆∞·ª£c d·ª± ƒëo√°n nhi·ªÅu nh·∫•t
    most_common_speaker, count = Counter(predictions).most_common(1)[0]

    # T√≠nh ƒë·ªô ch√≠nh x√°c trung b√¨nh
    avg_confidence = np.mean(confidences)

    return most_common_speaker, avg_confidence

def clear_folder(folder_path):
    """X√≥a to√†n b·ªô ·∫£nh trong th∆∞ m·ª•c sau khi test xong."""
    for file in os.listdir(folder_path):
        file_path = os.path.join(folder_path, file)
        if os.path.isfile(file_path) and file_path.endswith(('.png', '.jpg', '.jpeg')):
            os.remove(file_path)


# audio_path = "Data/Data_test/Voice_10/BTV Vi·ªát H√† - D·ª± B√°o Th·ªùi Ti·∫øt.mp3"
# mel_save_dir = "Data/Temp"


# # B∆∞·ªõc 1: T·∫°o Mel Spectrogram t·ª´ audio
# plot_spectrogram(audio_path, save_dir=mel_save_dir, use_mel=True)

# # B∆∞·ªõc 2: D·ª± ƒëo√°n speaker
# speaker, confidence = predict_speaker_from_folder(mel_save_dir, model_path, label_path)
# print(f"üîä D·ª± ƒëo√°n ng∆∞·ªùi n√≥i: {speaker} v·ªõi ƒë·ªô tin c·∫≠y: {confidence:.2f}")

# # B∆∞·ªõc 3: Xo√° ·∫£nh sau khi test
# clear_folder(mel_save_dir)